---
layout: post
category: "java"
title:  "10问java正则表达式"
tags: [java]
---
#### 1. 从字符串提前数字

java中"\d"代表数字范围0-9：
<pre>
List<Integer> numbers = new LinkedList<Integer>();
Pattern p = Pattern.compile("\\d+");
Matcher m = p.matcher(str); 
while (m.find()) {
  numbers.add(Integer.parseInt(m.group()));
}
</pre>

#### 2. 通过换行符分隔String

不同的系统中又3种换行符：

* \r - Unix
* \n - Mac OS
* \r\n - Windows

String lines[] = String.split("\\r?\\n");

如果不想有空行，可以用下面的方式：String.split("[\\r\\n]+")；

更健壮的方式是这样：String.split(System.getProperty("line.separator"));

#### 3. Pattern.compile()的重要性

要使用正则分析的字符串，必须被编译为Pattern对象。compile是生成这个对象的唯一方法。
<pre>
Pattern p = Pattern.compile("a*b");
Matcher matcher = p.matcher("aaaaab");
assert matcher.matches() == true;
</pre>
本质上，Pattern.compile()把正则转换为有限状态机，所有状态被存储在比较器中，换句话说，p可以重用，比较器可以共享相同的pattern。
<pre>
Matcher anotherMatcher = p.matcher("aab");
assert anotherMatcher.matches() == true;
</pre>
当一个正则只使用一次，Pattern.matches()被定义作为便利。这个方法将取得一个pattern的实例并比较字符串，因此，boolean b = Pattern.matches("a*b", "aaaaab");这段代码和第一个是等价的，对重复的比较消耗更小蛋pattern不能重用。

#### 4. 正则中特殊字符转义

比如$5，避免\\$5,[$]5的写法：Pattern.quote("$5");

#### 5. 为什么String.split方法的分隔符需要转义

split方法也是使用了正则，有些字符如 a|b 表示a or b 。所以为了区分含义，需要改为\\|。

#### 6. 怎样匹配anbn

例如：ab,aabb,aaabbb
<pre>
Pattern p = Pattern.compile("(?x)(?:a(?= a*(\\1?+b)))+\\1");
// true
System.out.println(p.matcher("aaabbb").matches());
// false
System.out.println(p.matcher("aaaabbb").matches());
// false
System.out.println(p.matcher("aaabbbb").matches());
// false
System.out.println(p.matcher("caaabbb").matches());
</pre>

#### 7. 怎样用1个空格替换掉多个空格

<pre>
String line = "  aa bbbbb   ccc     d  ";
// " aa bbbbb ccc d "
System.out.println(line.replaceAll("[\\s]+", " "));
//注意首尾的空格不能去掉，需要调用trim
</pre>

#### 8. 怎样判断一个数是素数

<pre>
public static void main(String[] args) {
  // false
  System.out.println(prime(1));
  // true
  System.out.println(prime(2));
  // true
  System.out.println(prime(3));
  // true
  System.out.println(prime(5));
  // false
  System.out.println(prime(8));
  // true
  System.out.println(prime(13));
  // false
  System.out.println(prime(14));
  // false
  System.out.println(prime(15));
}
 
public static boolean prime(int n) {
  return !new String(new char[n]).matches(".?|(..+?)\\1+");
}
</pre>

#### 9. 逗号分隔字符串，但忽略引号中的逗号

<pre>
public static void main(String[] args) {
  String line = "aaa,bbb,\"c,c\",dd;dd,\"e,e";
  List<String> toks = splitComma(line);
  for (String t : toks) {
    System.out.println("> " + t);
  }
}
 
private static List<String> splitComma(String str) {
  int start = 0;
  List<String> toks = new ArrayList<String>();
  boolean withinQuote = false;
  for (int end = 0; end < str.length(); end++) {
    char c = str.charAt(end);
    switch(c) {
    case ',':
      if (!withinQuote) {
        toks.add(str.substring(start, end));
        start = end + 1;
      }
      break;
    case '\"':
      withinQuote = !withinQuote;
      break;
    }
  }
  if (start < str.length()) {
    toks.add(str.substring(start));
  }
  return toks;
}
</pre>

#### 10. 反向引用（backreferences）
